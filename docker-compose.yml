services:
  # Elasticsearch (기존 설정 재사용)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: rag_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - rag_network
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # # FastAPI RAG 서버
  # rag-api:
  #   build:
  #     context: . # 프로젝트 루트에서 빌드
  #     dockerfile: Dockerfile
  #   container_name: rag_api_server
  #   ports:
  #     - "8110:8110"
  #   env_file:
  #     - ./.env.prod # 프로젝트 루트의 .env.prod 파일 사용
  #   environment:
  #     - ELASTICSEARCH_URL=http://elasticsearch:9200
  #     - OLLAMA_BASE_URL=http://host.docker.internal:11434 # 호스트의 Ollama 사용
  #     - PYTHONPATH=/app/src:/app
  #     - LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY:-}
  #     - LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY:-}
  #     - LANGFUSE_HOST=${LANGFUSE_HOST:-https://cloud.langfuse.com}
  #   volumes:
  #     - ./data/pdf:/app/data/pdf:ro
  #     - ./data:/app/data:ro
  #     - ./config:/app/config:ro
  #   depends_on:
  #     elasticsearch:
  #       condition: service_healthy
  #   networks:
  #     - rag_network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl -f http://localhost:8110/health || exit 1"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   extra_hosts:
  #     - "host.docker.internal:host-gateway" # 호스트 접근 허용

  # Ollama (AWS EC2에 이미 설치되어 있으므로 주석 처리)
  # ollama:
  #   image: ollama/ollama:latest
  #   container_name: rag_ollama
  #   ports:
  #     - "11434:11434"
  #   volumes:
  #     - ollama_data:/root/.ollama
  #   networks:
  #     - rag_network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl -f http://localhost:11434/api/tags || exit 1"]
  #     interval: 60s
  #     timeout: 10s
  #     retries: 3

  # Nginx (AWS EC2에 이미 설치되어 있으므로 주석 처리)
  # nginx:
  #   image: nginx:alpine
  #   container_name: rag_nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./src/api/nginx.conf:/etc/nginx/nginx.conf:ro
  #   depends_on:
  #     - rag-api
  #   networks:
  #     - rag_network
  #   restart: unless-stopped

  # 선택사항: 자체 호스팅 Langfuse (클라우드 대신 사용 시)
  # langfuse-db:
  #   image: postgres:15
  #   container_name: langfuse_postgres
  #   environment:
  #     POSTGRES_DB: langfuse
  #     POSTGRES_USER: langfuse
  #     POSTGRES_PASSWORD: langfuse_password
  #   volumes:
  #     - langfuse_db_data:/var/lib/postgresql/data
  #   networks:
  #     - rag_network

  # langfuse:
  #   image: langfuse/langfuse:latest
  #   container_name: langfuse_server
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     DATABASE_URL: postgresql://langfuse:langfuse_password@langfuse-db:5432/langfuse
  #     NEXTAUTH_SECRET: your-secret-key-here
  #     NEXTAUTH_URL: http://localhost:3000
  #     SALT: your-salt-here
  #   depends_on:
  #     - langfuse-db
  #   networks:
  #     - rag_network
  #   restart: unless-stopped

volumes:
  elasticsearch_data:
    driver: local
  # ollama_data:  # AWS EC2에 이미 설치되어 있으므로 주석 처리
  #   driver: local
  # langfuse_db_data:
  #   driver: local

networks:
  rag_network:
    driver: bridge
